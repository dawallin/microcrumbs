/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ZipkinCollector {
  public interface Iface : Scribe.Iface {
    /// <summary>
    /// Aggregates methods
    /// </summary>
    /// <param name="service_name"></param>
    /// <param name="annotations"></param>
    void storeTopAnnotations(string service_name, List<string> annotations);
    #if SILVERLIGHT
    IAsyncResult Begin_storeTopAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations);
    void End_storeTopAnnotations(IAsyncResult asyncResult);
    #endif
    void storeTopKeyValueAnnotations(string service_name, List<string> annotations);
    #if SILVERLIGHT
    IAsyncResult Begin_storeTopKeyValueAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations);
    void End_storeTopKeyValueAnnotations(IAsyncResult asyncResult);
    #endif
    void storeDependencies(Dependencies dependencies);
    #if SILVERLIGHT
    IAsyncResult Begin_storeDependencies(AsyncCallback callback, object state, Dependencies dependencies);
    void End_storeDependencies(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Scribe.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_storeTopAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations)
    {
      return send_storeTopAnnotations(callback, state, service_name, annotations);
    }

    public void End_storeTopAnnotations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_storeTopAnnotations();
    }

    #endif

    /// <summary>
    /// Aggregates methods
    /// </summary>
    /// <param name="service_name"></param>
    /// <param name="annotations"></param>
    public void storeTopAnnotations(string service_name, List<string> annotations)
    {
      #if !SILVERLIGHT
      send_storeTopAnnotations(service_name, annotations);
      recv_storeTopAnnotations();

      #else
      var asyncResult = Begin_storeTopAnnotations(null, null, service_name, annotations);
      End_storeTopAnnotations(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_storeTopAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations)
    #else
    public void send_storeTopAnnotations(string service_name, List<string> annotations)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("storeTopAnnotations", TMessageType.Call, seqid_));
      storeTopAnnotations_args args = new storeTopAnnotations_args();
      args.Service_name = service_name;
      args.Annotations = annotations;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_storeTopAnnotations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      storeTopAnnotations_result result = new storeTopAnnotations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_storeTopKeyValueAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations)
    {
      return send_storeTopKeyValueAnnotations(callback, state, service_name, annotations);
    }

    public void End_storeTopKeyValueAnnotations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_storeTopKeyValueAnnotations();
    }

    #endif

    public void storeTopKeyValueAnnotations(string service_name, List<string> annotations)
    {
      #if !SILVERLIGHT
      send_storeTopKeyValueAnnotations(service_name, annotations);
      recv_storeTopKeyValueAnnotations();

      #else
      var asyncResult = Begin_storeTopKeyValueAnnotations(null, null, service_name, annotations);
      End_storeTopKeyValueAnnotations(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_storeTopKeyValueAnnotations(AsyncCallback callback, object state, string service_name, List<string> annotations)
    #else
    public void send_storeTopKeyValueAnnotations(string service_name, List<string> annotations)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("storeTopKeyValueAnnotations", TMessageType.Call, seqid_));
      storeTopKeyValueAnnotations_args args = new storeTopKeyValueAnnotations_args();
      args.Service_name = service_name;
      args.Annotations = annotations;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_storeTopKeyValueAnnotations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      storeTopKeyValueAnnotations_result result = new storeTopKeyValueAnnotations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_storeDependencies(AsyncCallback callback, object state, Dependencies dependencies)
    {
      return send_storeDependencies(callback, state, dependencies);
    }

    public void End_storeDependencies(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_storeDependencies();
    }

    #endif

    public void storeDependencies(Dependencies dependencies)
    {
      #if !SILVERLIGHT
      send_storeDependencies(dependencies);
      recv_storeDependencies();

      #else
      var asyncResult = Begin_storeDependencies(null, null, dependencies);
      End_storeDependencies(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_storeDependencies(AsyncCallback callback, object state, Dependencies dependencies)
    #else
    public void send_storeDependencies(Dependencies dependencies)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("storeDependencies", TMessageType.Call, seqid_));
      storeDependencies_args args = new storeDependencies_args();
      args.Dependencies = dependencies;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_storeDependencies()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      storeDependencies_result result = new storeDependencies_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : Scribe.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["storeTopAnnotations"] = storeTopAnnotations_Process;
      processMap_["storeTopKeyValueAnnotations"] = storeTopKeyValueAnnotations_Process;
      processMap_["storeDependencies"] = storeDependencies_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void storeTopAnnotations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      storeTopAnnotations_args args = new storeTopAnnotations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      storeTopAnnotations_result result = new storeTopAnnotations_result();
      try {
        iface_.storeTopAnnotations(args.Service_name, args.Annotations);
      } catch (StoreAggregatesException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("storeTopAnnotations", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void storeTopKeyValueAnnotations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      storeTopKeyValueAnnotations_args args = new storeTopKeyValueAnnotations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      storeTopKeyValueAnnotations_result result = new storeTopKeyValueAnnotations_result();
      try {
        iface_.storeTopKeyValueAnnotations(args.Service_name, args.Annotations);
      } catch (StoreAggregatesException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("storeTopKeyValueAnnotations", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void storeDependencies_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      storeDependencies_args args = new storeDependencies_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      storeDependencies_result result = new storeDependencies_result();
      try {
        iface_.storeDependencies(args.Dependencies);
      } catch (StoreAggregatesException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("storeDependencies", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeTopAnnotations_args : TBase
  {
    private string _service_name;
    private List<string> _annotations;

    public string Service_name
    {
      get
      {
        return _service_name;
      }
      set
      {
        __isset.service_name = true;
        this._service_name = value;
      }
    }

    public List<string> Annotations
    {
      get
      {
        return _annotations;
      }
      set
      {
        __isset.annotations = true;
        this._annotations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool service_name;
      public bool annotations;
    }

    public storeTopAnnotations_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Service_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Annotations = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Annotations.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeTopAnnotations_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Service_name != null && __isset.service_name) {
        field.Name = "service_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Service_name);
        oprot.WriteFieldEnd();
      }
      if (Annotations != null && __isset.annotations) {
        field.Name = "annotations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Annotations.Count));
          foreach (string _iter3 in Annotations)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeTopAnnotations_args(");
      bool __first = true;
      if (Service_name != null && __isset.service_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Service_name: ");
        __sb.Append(Service_name);
      }
      if (Annotations != null && __isset.annotations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Annotations: ");
        __sb.Append(Annotations);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeTopAnnotations_result : TBase
  {
    private StoreAggregatesException _e;

    public StoreAggregatesException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public storeTopAnnotations_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new StoreAggregatesException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeTopAnnotations_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeTopAnnotations_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeTopKeyValueAnnotations_args : TBase
  {
    private string _service_name;
    private List<string> _annotations;

    public string Service_name
    {
      get
      {
        return _service_name;
      }
      set
      {
        __isset.service_name = true;
        this._service_name = value;
      }
    }

    public List<string> Annotations
    {
      get
      {
        return _annotations;
      }
      set
      {
        __isset.annotations = true;
        this._annotations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool service_name;
      public bool annotations;
    }

    public storeTopKeyValueAnnotations_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Service_name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Annotations = new List<string>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  string _elem6;
                  _elem6 = iprot.ReadString();
                  Annotations.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeTopKeyValueAnnotations_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Service_name != null && __isset.service_name) {
        field.Name = "service_name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Service_name);
        oprot.WriteFieldEnd();
      }
      if (Annotations != null && __isset.annotations) {
        field.Name = "annotations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Annotations.Count));
          foreach (string _iter7 in Annotations)
          {
            oprot.WriteString(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeTopKeyValueAnnotations_args(");
      bool __first = true;
      if (Service_name != null && __isset.service_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Service_name: ");
        __sb.Append(Service_name);
      }
      if (Annotations != null && __isset.annotations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Annotations: ");
        __sb.Append(Annotations);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeTopKeyValueAnnotations_result : TBase
  {
    private StoreAggregatesException _e;

    public StoreAggregatesException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public storeTopKeyValueAnnotations_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new StoreAggregatesException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeTopKeyValueAnnotations_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeTopKeyValueAnnotations_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeDependencies_args : TBase
  {
    private Dependencies _dependencies;

    public Dependencies Dependencies
    {
      get
      {
        return _dependencies;
      }
      set
      {
        __isset.dependencies = true;
        this._dependencies = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dependencies;
    }

    public storeDependencies_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Dependencies = new Dependencies();
              Dependencies.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeDependencies_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Dependencies != null && __isset.dependencies) {
        field.Name = "dependencies";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Dependencies.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeDependencies_args(");
      bool __first = true;
      if (Dependencies != null && __isset.dependencies) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dependencies: ");
        __sb.Append(Dependencies== null ? "<null>" : Dependencies.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeDependencies_result : TBase
  {
    private StoreAggregatesException _e;

    public StoreAggregatesException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public storeDependencies_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              E = new StoreAggregatesException();
              E.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("storeDependencies_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.e) {
        if (E != null) {
          field.Name = "E";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          E.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeDependencies_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
